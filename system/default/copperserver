local ServerConfig = {
  User = {
    Frequency = 65000;
    ModemName = "any";
    Name = "";
    MaxAcceptedDistance = 128;
    ServerDir = "";
  },

  Internal = {
    Password = nil,
    Salt = nil,
  },
}

System.Registry.ValidateKey("COPPERServer", ServerConfig)
ServerConfig = System.Registry.Get("COPPERServer")

local logFile = nil

local function print(...)
  term.setTextColour(colours.white)
  logFile.writeLine(table.concat({ ... }))
  return _G.print(...)
end

local function printWarning(...)
  term.setTextColour(term.isColour() and colours.yellow or colours.white)
  if logFile then
    logFile.writeLine(table.concat({ "Warning: ", ... }))
  end
  return _G.print(...)
end

local function printError(...)
  term.setTextColour(term.isColour() and colours.red or colours.white)
  if logFile then
    logFile.writeLine(table.concat({ "Error: ", ... }))
  end
  return _G.print(...)
end

local serverName = ServerConfig.User.Name
if serverName:match("^%s-$") then
  printError("Please name your server by setting COPPERServer/User/Name in the registry.")
  return
end

local serverDir = ServerConfig.User.ServerDir
if serverDir:match("^%s-$") then
  printError("Please set a directory for your server to run in by setting COPPERServer/User/ServerDir in the registry.")
  return
end

do
  local drive = System.Path.GetDriveAndPath(serverDir)
  if not System.File.IsDrive(drive) then
    printError("Server directory is not inside a valid drive.")
    return
  end

  if not fs.exists(serverDir) then
    fs.makeDir(serverDir)
  end
end

logFile = fs.open(System.Path.Combine(serverDir, "logs.txt"), "w")

local password = ServerConfig.Internal.Password

local modemName = ServerConfig.User.ModemName
local modem

do
  local wiredLambda = function(m) return not m.isWireless() end

  if modemName:lower() == "any" then
    modem = System.Network.GetAnyOfType("modem", wiredLambda) -- prefer wired
            or System.Network.GetAnyOfType("modem") -- fall back to wireless
    modemName = modem.GetName()
  else
    modem = System.Network[modemName]
  end


  if modem == nil then
    printError("No suitable modem found.")
    return
  end

  if modem.isWireless() then
    printWarning("Consider switching to a wired network!")
  end
end

local frequency = ServerConfig.User.Frequency
local maxDist = ServerConfig.User.MaxAcceptedDistance

local running = false

local serverSocket = System.COPPER.Socket(serverName, serverName, modem, frequency)

local function closeServer()
  logFile.close()
  running = false
  serverSocket:Close()
end

local function denyConnection(reason)
  local packet = System.COPPER.Packet()
  packet:WriteNumber(System.COPPER.PACKET_ACCESS_DENIED)
  packet:WriteString(serverName)
  packet:WriteNumber(reason)
  return packet
end

local function grantConnection(key)
  local packet = System.COPPER.Packet()
  packet:WriteNumber(System.COPPER.PACKET_ACCESS_GRANTED)
  packet:WriteString(serverName)
  packet:WriteString(key)
  return packet
end

local sessions = {}

local function getSessionFromKey(key)
  for k,v in pairs(sessions) do
    if v.Key == key then
      return v, k
    end
  end
end

local packetHandlers = {
  [System.COPPER.PACKET_CONNECT] = function(name, pack)
    local encrypted = pack:ReadString()
    local hashed = ServerConfig.Internal.Password
    local salt = ServerConfig.Internal.Salt
    local password = System.Security.Decrypt(encrypted, hashed)

    if password == nil then
      return denyConnection(System.COPPER.DENY_REASON_INVALID_CREDENTIALS)
    end

    local incomingHashed = System.Security.Hash(password, salt)

    if hashed == incomingHashed then
      if sessions[name] ~= nil then
        return denyConnection(System.COPPER.DENY_REASON_ALREADY_LOGGED_IN)
      end

      local key = System.Security.Hash(password .. name, System.Security.GenerateSalt(32))
      sessions[name] = {
        Key = key
      }

      return grantConnection(key)
    else
      return denyConnection(System.COPPER.DENY_REASON_INVALID_CREDENTIALS)
    end
  end,

  [System.COPPER.PACKET_REQUEST_SALT] = function(name, pack)
    local response = System.COPPER.Packet()
    response:WriteNumber(System.COPPER.PACKET_SALT)
    response:WriteString(serverName)
    response:WriteString(ServerConfig.Internal.Salt)
    print("Sending salt " .. ServerConfig.Internal.Salt)
    return response
  end,

  [System.COPPER.PACKET_LOGOUT] = function(name, pack)
    local key = pack:ReadString()
    local session, sessionName = getSessionFromKey(key)
    sessions[sessionName] = nil
  end
}

local function processMessage(sock, msg, dist)
  if maxDist >= 0 then
    if dist > maxDist then
      return -- ignore
    end
  end

  local packet = System.COPPER.MakePacketFromData(msg)
  if packet ~= nil then -- Non-COPPER packets will be nil
    local clientName = packet:ReadString()
    local pid = packet:ReadNumber()
    local name = packet:ReadString()

    if name ~= serverName then
      return
    end

    local handler = packetHandlers[pid]

    if handler then
      local response = handler(clientName, packet)
      if response then
        serverSocket:SendPacket(response)
      end
    end
  end
end

local function serverLoop()
  while running do
    local e, p1, p2, p3, p4, p5 = os.pullEvent("socket_message", "char")
    if e == "socket_message" then
      local sock = System.Socket.GetFromCacheID(p1)
      processMessage(sock, p2, sock:GetDistance())
    elseif e == "char" then
      if p1 == "q" then
        return closeServer()
      end
    end
  end
end

local function setPassword(input)
  local salt = System.Security.GenerateSalt()
  local pswd = System.Security.Hash(input, salt)
  ServerConfig.Internal.Password = pswd
  ServerConfig.Internal.Salt = salt
  System.Registry.Save()
end

do
  print("Starting server on frequency " .. frequency)
  print("Name: " .. serverName)
  print("Modem: " .. modemName)
  print("Directory: " .. System.Path.Normalise(serverDir))

  if password == nil then
    write("Please enter a password: ")
    setPassword(read("*"))
  end

  print("Press Q to end the server...")

  running = true
  serverLoop()

  return closeServer()
end
